"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/radar-sdk-js";
exports.ids = ["vendor-chunks/radar-sdk-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/radar-sdk-js/dist/radar.js":
/*!*************************************************!*\
  !*** ./node_modules/radar-sdk-js/dist/radar.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Radar)\n/* harmony export */ });\n/* harmony import */ var maplibre_gl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! maplibre-gl */ \"(ssr)/./node_modules/maplibre-gl/dist/maplibre-gl.js\");\n\n\nclass Config {\n    static setup(options = {}) {\n        Config.options = options;\n    }\n    static get() {\n        return Config.options || {};\n    }\n    static clear() {\n        Config.options = {};\n    }\n}\nConfig.defaultOptions = {\n    live: false,\n    logLevel: 'error',\n    host: 'https://api.radar.io',\n    version: 'v1',\n    debug: false,\n};\n\nconst LOG_LEVELS = {\n    none: 0,\n    error: 1,\n    warn: 2,\n    info: 3,\n    debug: 4,\n};\n// get the numeric level for logLevel option\nconst getLevel = () => {\n    // disable logging in tests\n    if (window && window.RADAR_TEST_ENV) {\n        return LOG_LEVELS.none;\n    }\n    const { logLevel, debug } = Config.get();\n    if (debug) {\n        return LOG_LEVELS.debug;\n    }\n    if (logLevel) {\n        return LOG_LEVELS[logLevel];\n    }\n    return LOG_LEVELS.error; // default to error-level logging if not set\n};\nclass Logger {\n    static debug(message) {\n        if (getLevel() === LOG_LEVELS.debug) {\n            console.log(`Radar SDK (debug): ${message.trim()}`);\n        }\n    }\n    static info(message) {\n        if (getLevel() >= LOG_LEVELS.info) {\n            console.log(`Radar SDK: ${message.trim()}`);\n        }\n    }\n    static warn(message) {\n        if (getLevel() >= LOG_LEVELS.warn) {\n            console.warn(`Radar SDK: ${message.trim()}`);\n        }\n    }\n    static error(message) {\n        if (getLevel() >= LOG_LEVELS.error) {\n            console.error(`Radar SDK: ${message.trim()}`);\n        }\n    }\n}\n\nclass Storage {\n    // local storage key definitions for identifying track users\n    static get USER_ID() {\n        return 'radar-userId';\n    }\n    static get DEVICE_ID() {\n        return 'radar-deviceId';\n    }\n    static get INSTALL_ID() {\n        return 'radar-installId';\n    }\n    static get SESSION_ID() {\n        return 'radar-sessionId';\n    }\n    static get DESCRIPTION() {\n        return 'radar-description';\n    }\n    static get METADATA() {\n        return 'radar-metadata';\n    }\n    static get CACHED_LOCATION() {\n        return 'radar-cached-location';\n    }\n    static get TRIP_OPTIONS() {\n        return 'radar-trip-options';\n    }\n    static getStorage() {\n        const storage = window === null || window === void 0 ? void 0 : window.localStorage;\n        if (!storage) {\n            Logger.warn('localStorage not available.');\n        }\n        return storage;\n    }\n    static setItem(key, value) {\n        const storage = this.getStorage();\n        if (!storage) {\n            return;\n        }\n        if (value === undefined || value === null) {\n            return;\n        }\n        storage.setItem(key, value);\n    }\n    static getItem(key) {\n        const storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        const value = storage.getItem(key);\n        if (value !== undefined && value !== null) {\n            return value;\n        }\n        return null;\n    }\n    static getJSON(key) {\n        const item = this.getItem(key);\n        if (!item) {\n            return null;\n        }\n        try {\n            return JSON.parse(item);\n        }\n        catch (err) {\n            Logger.warn(`could not getJSON from storage for key: ${key}`);\n            return null;\n        }\n    }\n    static removeItem(key) {\n        const storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        storage.removeItem(key);\n    }\n    static clear() {\n        const storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        storage.clear();\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nclass RadarError extends Error {\n    constructor(message) {\n        super(message);\n        this.status = ''; // to be overridden (support for legacy status)\n    }\n}\nclass RadarPublishableKeyError extends RadarError {\n    constructor(message) {\n        super(message);\n        this.name = 'RadarPublishableKeyError';\n        this.status = 'ERROR_PUBLISHABLE_KEY';\n    }\n}\nclass RadarLocationError extends RadarError {\n    constructor(message) {\n        super(message);\n        this.name = 'RadarLocationError';\n        this.status = 'ERROR_LOCATION';\n    }\n}\nclass RadarPermissionsError extends RadarError {\n    constructor(message) {\n        super(message);\n        this.name = 'RadarPermissionsError';\n        this.status = 'ERROR_PERMISSIONS';\n    }\n}\nclass RadarVerifyAppError extends RadarError {\n    constructor() {\n        super('Radar Verify app not running.');\n        this.name = 'RadarVerifyAppError';\n        this.status = 'ERROR_VERIFY_APP';\n    }\n}\n// HTTP Errors\nclass RadarBadRequestError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Bad request.');\n        this.name = 'RadarBadRequestError';\n        this.code = 400;\n        this.response = response;\n        this.status = 'ERROR_BAD_REQUEST';\n    }\n}\nclass RadarUnauthorizedError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Unauthorized.');\n        this.name = 'RadarUnauthorizedError';\n        this.code = 401;\n        this.response = response;\n        this.status = 'ERROR_UNAUTHORIZED';\n    }\n}\nclass RadarPaymentRequiredError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Payment required.');\n        this.name = 'RadarPaymentRequiredError';\n        this.code = 402;\n        this.response = response;\n        this.status = 'ERROR_PAYMENT_REQUIRED';\n    }\n}\nclass RadarForbiddenError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Forbidden.');\n        this.name = 'RadarForbiddenError';\n        this.code = 403;\n        this.response = response;\n        this.status = 'ERROR_FORBIDDEN';\n    }\n}\nclass RadarNotFoundError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Not found.');\n        this.name = 'RadarNotFoundError';\n        this.code = 404;\n        this.response = response;\n        this.status = 'ERROR_NOT_FOUND';\n    }\n}\nclass RadarRateLimitError extends RadarError {\n    constructor(response) {\n        var _a, _b;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Rate limit exceeded.');\n        this.name = 'RadarRateLimitError';\n        this.code = 429;\n        this.response = response;\n        this.type = (_b = response === null || response === void 0 ? void 0 : response.meta) === null || _b === void 0 ? void 0 : _b.type;\n        this.status = 'ERROR_RATE_LIMIT';\n    }\n}\nclass RadarServerError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Internal server error.');\n        this.name = 'RadarServerError';\n        this.response = response;\n        this.status = 'ERROR_SERVER';\n    }\n}\nclass RadarNetworkError extends RadarError {\n    constructor() {\n        super('Request timed out.');\n        this.name = 'RadarNetworkError';\n        this.status = 'ERROR_NETWORK';\n    }\n}\nclass RadarUnknownError extends RadarError {\n    constructor(response) {\n        var _a;\n        super(((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Something went wrong.');\n        this.name = 'RadarUnknownError';\n        this.response = response;\n        this.status = 'ERROR_UNKNOWN';\n    }\n}\nclass RadarAutocompleteContainerNotFound extends RadarError {\n    constructor(message) {\n        super(message);\n        this.name = 'RadarAutocompleteContainerNotFound';\n        this.status = 'CONTAINER_NOT_FOUND';\n    }\n}\n\nconst DEFAULT_POSITION_OPTIONS = {\n    maximumAge: 0,\n    timeout: 1000 * 30,\n    enableHighAccuracy: true,\n};\n// set \"enableHighAccuracy\" for navigator only when desiredAccuracy is \"high\"\nconst useHighAccuracy = (desiredAccuracy) => (Boolean(desiredAccuracy === 'high'));\nclass Navigator {\n    static getCurrentPosition(overrides = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                const options = Config.get();\n                if (!navigator || !navigator.geolocation) {\n                    return reject(new RadarLocationError('navigator.geolocation is not available.'));\n                }\n                // use cached location if available and options are set\n                if (options.cacheLocationMinutes) {\n                    try {\n                        const rawCachedLocation = Storage.getItem(Storage.CACHED_LOCATION);\n                        if (rawCachedLocation) {\n                            const cachedLocation = JSON.parse(rawCachedLocation);\n                            const { latitude, longitude, accuracy, expiresAt } = cachedLocation || {};\n                            if (Date.now() < parseInt(expiresAt)) {\n                                if (latitude && longitude && accuracy) {\n                                    return resolve({ latitude, longitude, accuracy });\n                                }\n                            }\n                        }\n                    }\n                    catch (e) {\n                        Logger.warn('could not load cached location.');\n                    }\n                }\n                // set options from config\n                const positionOptions = Object.assign({}, DEFAULT_POSITION_OPTIONS);\n                if (options.locationMaximumAge !== undefined) {\n                    positionOptions.maximumAge = options.locationMaximumAge;\n                }\n                if (options.locationTimeout !== undefined) {\n                    positionOptions.timeout = options.locationTimeout;\n                }\n                if (options.desiredAccuracy !== undefined) {\n                    positionOptions.enableHighAccuracy = useHighAccuracy(options.desiredAccuracy);\n                }\n                // set options from overrides\n                if (overrides.desiredAccuracy !== undefined) {\n                    positionOptions.enableHighAccuracy = useHighAccuracy(overrides.desiredAccuracy);\n                }\n                Logger.info(`Using geolocation options: ${JSON.stringify(positionOptions)}`);\n                // get current location from browser\n                navigator.geolocation.getCurrentPosition((position) => {\n                    if (!position || !position.coords) {\n                        return reject(new RadarLocationError('device location return empty coordinates.'));\n                    }\n                    const { latitude, longitude, accuracy } = position.coords;\n                    // cache location if option is set\n                    if (options.cacheLocationMinutes) {\n                        const cacheLocationMinutes = Number.parseFloat(options.cacheLocationMinutes);\n                        const updatedAt = Date.now();\n                        const expiresAt = updatedAt + (cacheLocationMinutes * 60 * 1000); // convert to ms\n                        const lastLocation = { latitude, longitude, accuracy, updatedAt, expiresAt };\n                        Storage.setItem(Storage.CACHED_LOCATION, JSON.stringify(lastLocation));\n                    }\n                    return resolve({ latitude, longitude, accuracy });\n                }, (err) => {\n                    if (err && err.code === 1) {\n                        // https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError\n                        // code 1 means location permissions denied\n                        // codes 2 and 3 mean location unavailable or timeout\n                        return reject(new RadarPermissionsError('Location permissions denied.'));\n                    }\n                    return reject(new RadarLocationError('Could not determine location.'));\n                }, positionOptions);\n            });\n        });\n    }\n    static getPermissionStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                if (!navigator || !navigator.permissions) {\n                    return reject(new RadarLocationError('navigator.permissions is not available.'));\n                }\n                navigator.permissions.query({ name: 'geolocation' }).then((permissionsStatus) => {\n                    let locationAuthorization = 'NOT_DETERMINED';\n                    switch (permissionsStatus.state) {\n                        case 'granted':\n                            locationAuthorization = 'GRANTED_FOREGROUND';\n                            break;\n                        case 'denied':\n                            locationAuthorization = 'DENIED';\n                            break;\n                        case 'prompt':\n                            locationAuthorization = 'NOT_DETERMINED';\n                            break;\n                    }\n                    return resolve(locationAuthorization);\n                });\n            });\n        });\n    }\n}\n\nvar SDK_VERSION = '4.4.3';\n\nconst inFlightRequests = new Map();\nclass Http {\n    static request({ method, path, data, host, version, headers = {}, responseType, requestId, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                const options = Config.get();\n                // check for publishableKey on request\n                const publishableKey = options.publishableKey;\n                if (!publishableKey) {\n                    reject(new RadarPublishableKeyError('publishableKey not set.'));\n                    return;\n                }\n                // setup request URL\n                const urlHost = host || options.host;\n                const urlVersion = version || options.version;\n                let url = `${urlHost}/${urlVersion}/${path}`;\n                // remove undefined values from request data\n                let body = {};\n                Object.keys(data || {}).forEach((key) => {\n                    const value = data[key];\n                    if (value !== undefined) {\n                        body[key] = value;\n                    }\n                });\n                // convert data to querystring for GET requests\n                if (method === 'GET') {\n                    const params = Object.keys(body).map((key) => (`${key}=${encodeURIComponent(body[key])}`));\n                    if (params.length > 0) {\n                        const queryString = params.join('&');\n                        url = `${url}?${queryString}`;\n                    }\n                    body = undefined; // dont send body for GET request\n                }\n                // check for in-flight requests with matching requestIds\n                if (requestId) {\n                    const request = inFlightRequests.get(requestId);\n                    if (request) {\n                        request.abort(); // abort request\n                    }\n                }\n                const xhr = new XMLHttpRequest();\n                xhr.open(method, url, true);\n                // save reference to request\n                if (requestId) {\n                    inFlightRequests.set(requestId, xhr);\n                }\n                const defaultHeaders = {\n                    'Authorization': publishableKey,\n                    'Content-Type': 'application/json',\n                    'X-Radar-Device-Type': 'Web',\n                    'X-Radar-SDK-Version': SDK_VERSION,\n                };\n                // set custom config headers if present\n                let configHeaders = {};\n                if (typeof options.getRequestHeaders === 'function') {\n                    configHeaders = options.getRequestHeaders();\n                }\n                // combines default headers with custom headers and config headers\n                const allHeaders = Object.assign(defaultHeaders, configHeaders, headers);\n                // set headers\n                Object.keys(allHeaders).forEach((key) => {\n                    xhr.setRequestHeader(key, allHeaders[key]);\n                });\n                if (responseType) {\n                    xhr.responseType = responseType;\n                }\n                xhr.onload = () => {\n                    var _a;\n                    let response;\n                    if (requestId) { // clear in-flight request\n                        inFlightRequests.delete(requestId);\n                    }\n                    try {\n                        if (xhr.responseType === 'blob') {\n                            response = { code: xhr.status, data: xhr.response };\n                        }\n                        else {\n                            response = JSON.parse(xhr.response);\n                        }\n                    }\n                    catch (e) {\n                        return reject(new RadarServerError(response));\n                    }\n                    const error = (_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.error;\n                    if (error === 'ERROR_PERMISSIONS') {\n                        return reject(new RadarPermissionsError('Location permissions not granted.'));\n                    }\n                    else if (error === 'ERROR_LOCATION') {\n                        return reject(new RadarLocationError('Could not determine location.'));\n                    }\n                    else if (error === 'ERROR_NETWORK') {\n                        return reject(new RadarNetworkError());\n                    }\n                    if (xhr.status == 200) {\n                        return resolve(response);\n                    }\n                    if (options.debug) {\n                        Logger.debug(`API call failed: ${url}`);\n                        Logger.debug(JSON.stringify(response));\n                    }\n                    if (xhr.status === 400) {\n                        reject(new RadarBadRequestError(response));\n                    }\n                    else if (xhr.status === 401) {\n                        reject(new RadarUnauthorizedError(response));\n                    }\n                    else if (xhr.status === 402) {\n                        reject(new RadarPaymentRequiredError(response));\n                    }\n                    else if (xhr.status === 403) {\n                        reject(new RadarForbiddenError(response));\n                    }\n                    else if (xhr.status === 404) {\n                        reject(new RadarNotFoundError(response));\n                    }\n                    else if (xhr.status === 429) {\n                        reject(new RadarRateLimitError(response));\n                    }\n                    else if (500 <= xhr.status && xhr.status < 600) {\n                        reject(new RadarServerError(response));\n                    }\n                    else {\n                        reject(new RadarUnknownError(response));\n                    }\n                };\n                xhr.onerror = function () {\n                    if (host && (host === 'http://localhost:52516' || host === 'https://radar-verify.com:52516')) {\n                        reject(new RadarVerifyAppError());\n                    }\n                    else {\n                        reject(new RadarServerError());\n                    }\n                };\n                xhr.ontimeout = function () {\n                    reject(new RadarVerifyAppError());\n                };\n                xhr.send(JSON.stringify(body));\n            });\n        });\n    }\n}\n\nclass AddressesAPI {\n    static validateAddress(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'addresses/validate',\n                data: params,\n            });\n            const { address, result } = response;\n            const validateAddressRes = {\n                address,\n                result,\n            };\n            if (options.debug) {\n                validateAddressRes.response = response;\n            }\n            return validateAddressRes;\n        });\n    }\n}\n\nconst generateUUID = () => {\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {\n        const r = Math.random() * 16 | 0;\n        const v = (char == 'x') ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n    return uuid;\n};\nclass Device {\n    static getDeviceId() {\n        // use existing deviceId if present\n        const deviceId = Storage.getItem(Storage.DEVICE_ID);\n        if (deviceId) {\n            return deviceId;\n        }\n        // generate new deviceId\n        const uuid = generateUUID();\n        Storage.setItem(Storage.DEVICE_ID, uuid);\n        return uuid;\n    }\n    static getInstallId() {\n        // use existing installId if present\n        const deviceId = Storage.getItem(Storage.INSTALL_ID);\n        if (deviceId) {\n            return deviceId;\n        }\n        // generate new installId\n        const uuid = generateUUID();\n        Storage.setItem(Storage.INSTALL_ID, uuid);\n        return uuid;\n    }\n}\n\nconst SESSION_TIMEOUT_SECS = 300; // 5 mins\nconst isValid = (sessionId) => {\n    const now = Math.trunc(Date.now() / 1000);\n    const session = Number.parseInt(sessionId);\n    const diff = Math.abs(now - session);\n    return diff < SESSION_TIMEOUT_SECS;\n};\nclass Session {\n    static getSessionId() {\n        const sessionId = Storage.getItem(Storage.SESSION_ID);\n        // reuse session if still within 5 min threshold\n        if (sessionId && isValid(sessionId)) {\n            return sessionId;\n        }\n        // create new session if does not already exist or expired\n        const newSessionId = Math.trunc(Date.now() / 1000).toString(); // unix ts in seconds\n        Storage.setItem(Storage.SESSION_ID, newSessionId);\n        return newSessionId;\n    }\n}\n\nclass ConfigAPI {\n    static getConfig(params = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            if (options.version != 'v1') {\n                Logger.info('Skipping /config call.');\n                return;\n            }\n            const deviceId = params.deviceId || Device.getDeviceId();\n            const installId = params.installId || Device.getInstallId();\n            const sessionId = Session.getSessionId();\n            const locationAuthorization = yield Navigator.getPermissionStatus();\n            const data = {\n                deviceId,\n                installId,\n                sessionId,\n                locationAuthorization,\n            };\n            try {\n                yield Http.request({\n                    method: 'GET',\n                    path: 'config',\n                    data,\n                });\n            }\n            catch (err) {\n                Logger.warn(`Error calling /config: ${err.message}`);\n            }\n        });\n    }\n}\n\nclass ContextAPI {\n    static getContext(location) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            // get device location if coordinates not provided\n            if (!location.latitude || !location.longitude) {\n                location = yield Navigator.getCurrentPosition();\n            }\n            const { latitude, longitude, accuracy } = location;\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'context',\n                data: {\n                    coordinates: `${latitude},${longitude}`,\n                    accuracy,\n                },\n            });\n            const { geofences, place, country, state, dma, postalCode, } = response;\n            const contextRes = {\n                location,\n                geofences,\n                place,\n                country,\n                state,\n                dma,\n                postalCode,\n            };\n            if (options.debug) {\n                contextRes.response = response;\n            }\n            return contextRes;\n        });\n    }\n}\n\nclass ConversionsAPI {\n    static logConversion(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            const name = params.name;\n            const userId = params.userId || Storage.getItem(Storage.USER_ID);\n            const deviceId = params.deviceId || Device.getDeviceId();\n            const installId = params.installId || Device.getInstallId();\n            const metadata = params.metadata || {};\n            const createdAt = params.createdAt;\n            if (params.revenue) {\n                metadata.revenue = params.revenue;\n            }\n            const data = {\n                name,\n                userId,\n                deviceId,\n                installId,\n                metadata,\n            };\n            if (typeof createdAt === 'string') {\n                data.createdAt = createdAt;\n            }\n            else if (createdAt instanceof Date) {\n                data.createdAt = createdAt.toISOString();\n            }\n            else {\n                data.createdAt = (new Date()).toISOString();\n            }\n            const response = yield Http.request({\n                method: 'POST',\n                path: 'events',\n                data,\n            });\n            const conversionRes = {\n                event: response.event,\n            };\n            if (options.debug) {\n                conversionRes.response = response;\n            }\n            return conversionRes;\n        });\n    }\n}\n\nclass Geocoding {\n    static forwardGeocode(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            const { query, layers, country } = params;\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'geocode/forward',\n                data: {\n                    query,\n                    layers,\n                    country,\n                },\n            });\n            const forwardGeocodeRes = {\n                addresses: response.addresses,\n            };\n            if (options.debug) {\n                forwardGeocodeRes.response = response;\n            }\n            return forwardGeocodeRes;\n        });\n    }\n    static reverseGeocode(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { latitude, longitude, layers } = params;\n            if (!latitude || !longitude) {\n                const location = yield Navigator.getCurrentPosition();\n                latitude = location.latitude;\n                longitude = location.longitude;\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'geocode/reverse',\n                data: {\n                    coordinates: `${latitude},${longitude}`,\n                    layers,\n                },\n            });\n            const reverseGeocodeRes = {\n                addresses: response.addresses,\n            };\n            if (options.debug) {\n                reverseGeocodeRes.response = response;\n            }\n            return reverseGeocodeRes;\n        });\n    }\n    static ipGeocode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'geocode/ip',\n            });\n            const ipGeocodeRes = {\n                ip: response.ip,\n                address: response.address,\n                proxy: response.proxy,\n            };\n            if (options.debug) {\n                ipGeocodeRes.response = response;\n            }\n            return ipGeocodeRes;\n        });\n    }\n}\n\nclass RoutingAPI {\n    static distance(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { origin, destination, modes, units, geometry, geometryPoints, avoid, } = params;\n            // use browser location if \"near\" not provided\n            if (!origin) {\n                const { latitude, longitude } = yield Navigator.getCurrentPosition();\n                origin = `${latitude},${longitude}`;\n            }\n            else if (typeof origin !== 'string') { // origin is \"Location\" object\n                const { latitude, longitude } = origin;\n                origin = `${latitude},${longitude}`;\n            }\n            if (typeof destination !== 'string') {\n                const { latitude, longitude } = destination;\n                destination = `${latitude},${longitude}`;\n            }\n            if (Array.isArray(modes)) {\n                modes = modes.join(',');\n            }\n            if (Array.isArray(avoid)) {\n                avoid = avoid.join(',');\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'route/distance',\n                data: {\n                    origin,\n                    destination,\n                    modes,\n                    units,\n                    geometry,\n                    geometryPoints,\n                    avoid,\n                },\n            });\n            const distanceRes = {\n                routes: response.routes,\n            };\n            if (options.debug) {\n                distanceRes.response = response;\n            }\n            return distanceRes;\n        });\n    }\n    static matrix(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { origins, destinations, mode, units, avoid, } = params;\n            // use browser location if \"near\" not provided\n            if (!origins) {\n                const { latitude, longitude } = yield Navigator.getCurrentPosition();\n                let originStrings = [];\n                for (let i = 0; i < destinations.length; i++) {\n                    originStrings.push(`${latitude},${longitude}`);\n                }\n                origins = originStrings.join('|');\n            }\n            else if (Array.isArray(origins)) { // origin is a list of \"Location\" objects\n                origins = origins.map((location) => `${location.latitude},${location.longitude}`).join('|');\n            }\n            // convert array to pipe-delimited string\n            if (Array.isArray(destinations)) {\n                destinations = destinations.map((location) => `${location.latitude},${location.longitude}`).join('|');\n            }\n            if (Array.isArray(avoid)) {\n                avoid = avoid.join(',');\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'route/matrix',\n                data: {\n                    origins,\n                    destinations,\n                    mode,\n                    units,\n                    avoid,\n                },\n            });\n            const matrixRes = {\n                origins: response.origins,\n                destinations: response.destinations,\n                matrix: response.matrix,\n            };\n            if (options.debug) {\n                matrixRes.response = response;\n            }\n            return matrixRes;\n        });\n    }\n}\n\nclass SearchAPI {\n    static autocomplete(params, requestId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { query, near, limit, layers, countryCode, expandUnits, mailable, } = params;\n            // near can be provided as a string or Location object\n            // if \"near\" is not provided, request will fallback to IP based location\n            if (near && typeof near !== 'string') {\n                if (near.latitude && near.longitude) {\n                    near = `${near.latitude},${near.longitude}`;\n                }\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'search/autocomplete',\n                data: {\n                    query,\n                    near,\n                    limit,\n                    layers,\n                    countryCode,\n                    expandUnits,\n                    mailable,\n                },\n                requestId,\n            });\n            const autocompleteRes = {\n                addresses: response.addresses,\n            };\n            if (options.debug) {\n                autocompleteRes.response = response;\n            }\n            return autocompleteRes;\n        });\n    }\n    static searchGeofences(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { near, radius, tags, metadata, limit, includeGeometry, } = params;\n            // use browser location if \"near\" not provided\n            if (!near) {\n                const { latitude, longitude } = yield Navigator.getCurrentPosition();\n                near = `${latitude},${longitude}`;\n            }\n            else if (typeof near !== 'string') { // near is \"Location\" object\n                const { latitude, longitude } = near;\n                near = `${latitude},${longitude}`;\n            }\n            // convert arrays to comma-strings\n            if (Array.isArray(tags)) {\n                tags = tags.join(',');\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'search/geofences',\n                data: {\n                    near,\n                    radius,\n                    tags,\n                    metadata,\n                    limit,\n                    includeGeometry,\n                },\n            });\n            const geofencesSearchRes = {\n                geofences: response.geofences,\n            };\n            if (options.debug) {\n                geofencesSearchRes.response = response;\n            }\n            return geofencesSearchRes;\n        });\n    }\n    static searchPlaces(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { near, radius, chains, categories, groups, limit, } = params;\n            // use browser location if \"near\" not provided\n            if (!near) {\n                const { latitude, longitude } = yield Navigator.getCurrentPosition();\n                near = `${latitude},${longitude}`;\n            }\n            else if (typeof near !== 'string') { // near is \"Location\" object\n                const { latitude, longitude } = near;\n                near = `${latitude},${longitude}`;\n            }\n            // convert arrays to comma-strings\n            if (Array.isArray(chains)) {\n                chains = chains.join(',');\n            }\n            if (Array.isArray(categories)) {\n                categories = categories.join(',');\n            }\n            if (Array.isArray(groups)) {\n                groups = groups.join(',');\n            }\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'search/places',\n                data: {\n                    near,\n                    radius,\n                    chains,\n                    categories,\n                    groups,\n                    limit,\n                },\n            });\n            const placeSearchRes = {\n                places: response.places,\n            };\n            if (options.debug) {\n                placeSearchRes.response = response;\n            }\n            return placeSearchRes;\n        });\n    }\n}\n\n// https://stackoverflow.com/a/44198641\nconst isValidDate = (date) => date && Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date);\nclass TripsAPI {\n    static setTripOptions(tripOptions) {\n        if (!tripOptions) {\n            TripsAPI.clearTripOptions();\n            return;\n        }\n        const tripOptionsString = JSON.stringify(tripOptions);\n        Logger.debug(`Saving trip options: ${tripOptionsString}`);\n        Storage.setItem(Storage.TRIP_OPTIONS, tripOptionsString);\n    }\n    static getTripOptions() {\n        let tripOptions = Storage.getItem(Storage.TRIP_OPTIONS);\n        if (tripOptions) {\n            tripOptions = JSON.parse(tripOptions);\n        }\n        return tripOptions;\n    }\n    static clearTripOptions() {\n        Storage.removeItem(Storage.TRIP_OPTIONS);\n    }\n    static startTrip(tripOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            tripOptions = tripOptions || TripsAPI.getTripOptions();\n            if (!tripOptions) {\n                Logger.warn('tripOptions not set when calling \"startTrip\"');\n            }\n            const userId = tripOptions.userId || Storage.getItem(Storage.USER_ID);\n            if (userId && userId !== Storage.getItem(Storage.USER_ID)) {\n                // set as userId for tracking if provided\n                Storage.setItem(Storage.USER_ID, userId);\n            }\n            const { externalId, destinationGeofenceTag, destinationGeofenceExternalId, mode, metadata, approachingThreshold, scheduledArrivalAt, } = tripOptions;\n            const data = {\n                userId,\n                externalId,\n                destinationGeofenceTag,\n                destinationGeofenceExternalId,\n                mode,\n                metadata,\n                approachingThreshold,\n            };\n            if (isValidDate(scheduledArrivalAt)) {\n                data.scheduledArrivalAt = scheduledArrivalAt === null || scheduledArrivalAt === void 0 ? void 0 : scheduledArrivalAt.toJSON();\n            }\n            else {\n                if (scheduledArrivalAt) {\n                    Logger.warn('Invalid date format for scheduledArrivalAt');\n                }\n                data.scheduledArrivalAt = undefined;\n            }\n            const response = yield Http.request({\n                method: 'POST',\n                path: 'trips',\n                data,\n            });\n            // save trip options\n            TripsAPI.setTripOptions(tripOptions);\n            const tripRes = {\n                trip: response.trip,\n                events: response.events,\n            };\n            if (options.debug) {\n                tripRes.response = response;\n            }\n            return tripRes;\n        });\n    }\n    static updateTrip(tripOptions, status) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            tripOptions = tripOptions || TripsAPI.getTripOptions();\n            if (!tripOptions) {\n                Logger.warn('tripOptions not set when calling \"startTrip\"');\n            }\n            const { externalId, destinationGeofenceTag, destinationGeofenceExternalId, mode, metadata, approachingThreshold, scheduledArrivalAt, } = tripOptions;\n            const data = {\n                status,\n                externalId,\n                destinationGeofenceTag,\n                destinationGeofenceExternalId,\n                mode,\n                metadata,\n                approachingThreshold,\n            };\n            if (isValidDate(scheduledArrivalAt)) {\n                data.scheduledArrivalAt = scheduledArrivalAt === null || scheduledArrivalAt === void 0 ? void 0 : scheduledArrivalAt.toJSON();\n            }\n            else {\n                if (scheduledArrivalAt) {\n                    Logger.warn('Invalid date format for scheduledArrivalAt');\n                }\n                data.scheduledArrivalAt = undefined;\n            }\n            const response = yield Http.request({\n                method: 'PATCH',\n                path: `trips/${externalId}/update`,\n                data,\n            });\n            const tripRes = {\n                trip: response.trip,\n                events: response.events,\n            };\n            if (options.debug) {\n                tripRes.response = response;\n            }\n            return tripRes;\n        });\n    }\n    static completeTrip() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tripOptions = TripsAPI.getTripOptions();\n            const tripResponse = yield TripsAPI.updateTrip(tripOptions, 'completed');\n            // clear local trip options\n            TripsAPI.clearTripOptions();\n            return tripResponse;\n        });\n    }\n    static cancelTrip() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tripOptions = TripsAPI.getTripOptions();\n            const tripResponse = yield TripsAPI.updateTrip(tripOptions, 'canceled');\n            // clear local trip options\n            TripsAPI.clearTripOptions();\n            return tripResponse;\n        });\n    }\n}\n\nconst base64Encode = (str) => btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\nconst signJWT = (payload, key) => __awaiter(void 0, void 0, void 0, function* () {\n    const encoder = new TextEncoder();\n    const encodedHeader = base64Encode(JSON.stringify({\n        alg: 'HS256',\n        typ: 'JWT',\n    }));\n    const encodedPayload = base64Encode(JSON.stringify(payload));\n    const keyData = encoder.encode(key);\n    const messageData = encoder.encode(`${encodedHeader}.${encodedPayload}`);\n    const cryptoKey = yield crypto.subtle.importKey('raw', keyData, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n    const signatureArrayBuffer = yield crypto.subtle.sign('HMAC', cryptoKey, messageData);\n    const signature = base64Encode(String.fromCharCode(...Array.from(new Uint8Array(signatureArrayBuffer))));\n    return `${encodedHeader}.${encodedPayload}.${signature}`;\n});\n\nconst ping = (host) => {\n    return new Promise((resolve) => {\n        const socket = new WebSocket(host);\n        let pings = 0;\n        const latencies = [];\n        let pingInterval;\n        let timeoutInterval;\n        const ping = () => {\n            pings++;\n            const start = Date.now();\n            socket.send('ping');\n            socket.onmessage = (event) => {\n                if (event.data === 'pong') {\n                    const latency = Date.now() - start;\n                    latencies.push(latency);\n                    if (pings >= 3) {\n                        clearInterval(pingInterval);\n                        clearInterval(timeoutInterval);\n                        const median = latencies.sort((a, b) => a - b)[1];\n                        socket.close();\n                        resolve(median);\n                    }\n                }\n            };\n        };\n        const timeout = () => {\n            Logger.warn('Socket timeout');\n            clearInterval(pingInterval);\n            clearInterval(timeoutInterval);\n            socket.close();\n            resolve(-1);\n        };\n        socket.onerror = (err) => {\n            Logger.warn('Error opening socket');\n            socket.close();\n            resolve(-1);\n        };\n        socket.onopen = () => {\n            ping();\n            pingInterval = setInterval(ping, 1000);\n            timeoutInterval = setInterval(timeout, 10000);\n        };\n    });\n};\n\nclass TrackAPI {\n    static trackOnce(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            let { latitude, longitude, accuracy, desiredAccuracy, fraud } = params;\n            // if latitude & longitude are not provided,\n            // try and retrieve device location (will prompt for location permissions)\n            if (!latitude || !longitude) {\n                const deviceLocation = yield Navigator.getCurrentPosition({ desiredAccuracy });\n                latitude = deviceLocation.latitude;\n                longitude = deviceLocation.longitude;\n                accuracy = deviceLocation.accuracy;\n            }\n            // location authorization\n            let locationAuthorization;\n            try {\n                locationAuthorization = yield Navigator.getPermissionStatus();\n            }\n            catch (err) {\n                Logger.warn(`Location authorization error: ${err.message}`);\n            }\n            // user indentification fields\n            const userId = params.userId || Storage.getItem(Storage.USER_ID);\n            const deviceId = params.deviceId || Device.getDeviceId();\n            const installId = params.installId || Device.getInstallId();\n            const sessionId = Session.getSessionId();\n            const deviceType = params.deviceType || 'Web';\n            const description = params.description || Storage.getItem(Storage.DESCRIPTION);\n            let timeZone;\n            try {\n                timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n            }\n            catch (err) {\n                Logger.warn(`Error getting time zone: ${err.message}`);\n            }\n            // save userId for trip tracking\n            if (!userId) {\n                Logger.warn('userId not provided for trackOnce.');\n            }\n            else {\n                Storage.setItem(Storage.USER_ID, userId);\n            }\n            // other info\n            const metadata = params.metadata || Storage.getJSON(Storage.METADATA);\n            // trips\n            const tripOptions = params.tripOptions || TripsAPI.getTripOptions();\n            if (tripOptions) {\n                tripOptions.version = '2';\n            }\n            const body = Object.assign(Object.assign({}, params), { locationAuthorization,\n                accuracy,\n                description,\n                deviceId,\n                deviceType, foreground: true, installId,\n                sessionId,\n                latitude,\n                longitude,\n                metadata, sdkVersion: SDK_VERSION, stopped: true, userId,\n                tripOptions,\n                timeZone });\n            let response;\n            if (fraud) {\n                const host = 'https://api-verified.radar.io';\n                const pingHost = 'ping.radar-verify.com';\n                const lang = navigator.language;\n                const langs = navigator.languages;\n                const { dk } = yield Http.request({\n                    host,\n                    method: 'GET',\n                    path: 'config',\n                    data: {\n                        deviceId,\n                        installId,\n                        sessionId,\n                        locationAuthorization,\n                    },\n                    headers: {\n                        'X-Radar-Desktop-Device-Type': 'Web',\n                    },\n                });\n                let sclVal = -1;\n                let cslVal = -1;\n                try {\n                    const [sclRes, csl] = yield Promise.all([\n                        Http.request({\n                            host: `https://${pingHost}`,\n                            method: 'GET',\n                            path: 'ping',\n                        }),\n                        ping(`wss://${pingHost}`),\n                    ]);\n                    const { scl } = sclRes;\n                    sclVal = scl;\n                    cslVal = csl;\n                }\n                catch (err) {\n                    // do nothing, send scl = -1 and csl = -1\n                }\n                const payload = {\n                    payload: JSON.stringify(Object.assign(Object.assign({}, body), { scl: sclVal, csl: cslVal, lang,\n                        langs })),\n                };\n                const reqToken = yield signJWT(payload, dk);\n                response = yield Http.request({\n                    host,\n                    method: 'POST',\n                    path: 'track',\n                    data: {\n                        token: reqToken,\n                    },\n                    headers: {\n                        'X-Radar-Body-Is-Token': 'true',\n                    },\n                });\n                if (options.debug && response && response.user) {\n                    if (!response.user.metadata) {\n                        response.user.metadata = {};\n                    }\n                    response.user.metadata['radar:debug'] = {\n                        sclVal,\n                        cslVal,\n                    };\n                }\n                let { user, events, token, expiresAt, expiresIn, passed, failureReasons, _id } = response;\n                const location = { latitude, longitude, accuracy };\n                if (expiresAt) {\n                    expiresAt = new Date(expiresAt);\n                }\n                const trackRes = {\n                    user,\n                    events,\n                    location,\n                    token,\n                    expiresAt,\n                    expiresIn,\n                    passed,\n                    failureReasons,\n                    _id,\n                };\n                if (options.debug) {\n                    trackRes.response = response;\n                }\n                return trackRes;\n            }\n            response = yield Http.request({\n                method: 'POST',\n                path: 'track',\n                data: body,\n            });\n            const { user, events } = response;\n            const location = { latitude, longitude, accuracy };\n            const trackRes = {\n                user,\n                events,\n                location,\n            };\n            if (options.debug) {\n                trackRes.response = response;\n            }\n            return trackRes;\n        });\n    }\n}\n\nlet tokenTimeoutId = null;\nlet tokenCallback = null;\nlet lastToken = null;\nlet lastTokenNow = 0;\nlet expectedCountryCode = null;\nlet expectedStateCode = null;\nclass VerifyAPI {\n    static trackVerified(params, encrypted = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = Config.get();\n            // user indentification fields\n            const userId = params.userId || Storage.getItem(Storage.USER_ID);\n            const deviceId = params.deviceId || Device.getDeviceId();\n            const installId = params.installId || Device.getInstallId();\n            const sessionId = Session.getSessionId();\n            const description = params.description || Storage.getItem(Storage.DESCRIPTION);\n            // save userId\n            if (!userId) {\n                Logger.warn('userId not provided for trackVerified.');\n            }\n            else {\n                Storage.setItem(Storage.USER_ID, userId);\n            }\n            // other info\n            const metadata = params.metadata || Storage.getJSON(Storage.METADATA);\n            const body = Object.assign(Object.assign({}, params), { description,\n                deviceId, foreground: true, installId,\n                sessionId,\n                metadata, sdkVersion: SDK_VERSION, stopped: true, userId,\n                encrypted,\n                expectedCountryCode,\n                expectedStateCode });\n            let userAgent = navigator.userAgent;\n            const apple = userAgent && (userAgent.toLowerCase().includes('mac') || userAgent.toLowerCase().includes('iphone') || userAgent.toLowerCase().includes('ipod') || userAgent.toLowerCase().includes('ipad'));\n            const response = yield Http.request({\n                method: 'GET',\n                path: 'verify',\n                data: body,\n                host: apple ? 'https://radar-verify.com:52516' : 'http://localhost:52516',\n            });\n            let { user, events, token, expiresAt, expiresIn, passed, failureReasons, _id } = response;\n            let location;\n            if (user && user.location && user.location.coordinates && user.locationAccuracy) {\n                location = {\n                    latitude: user.location.coordinates[1],\n                    longitude: user.location.coordinates[0],\n                    accuracy: user.locationAccuracy,\n                };\n            }\n            if (expiresAt) {\n                expiresAt = new Date(expiresAt);\n            }\n            const trackRes = {\n                user,\n                events,\n                location,\n                token,\n                expiresAt,\n                expiresIn,\n                passed,\n                failureReasons,\n                _id,\n            };\n            if (options.debug) {\n                trackRes.response = response;\n            }\n            lastToken = trackRes;\n            lastTokenNow = performance.now();\n            if (tokenCallback) {\n                tokenCallback(trackRes);\n            }\n            return trackRes;\n        });\n    }\n    static startTrackingVerified(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const doTrackVerified = () => __awaiter(this, void 0, void 0, function* () {\n                const trackRes = yield this.trackVerified({});\n                const { interval } = params;\n                let expiresIn = 0;\n                let minInterval = interval;\n                if (trackRes) {\n                    expiresIn = (trackRes.expiresIn || expiresIn);\n                    // if expiresIn is shorter than interval, override interval\n                    minInterval = Math.min(expiresIn, interval);\n                }\n                // re-request early to maximize the likelihood that a cached token is available\n                if (minInterval > 20) {\n                    minInterval = minInterval - 10;\n                }\n                // min interval is 10 seconds\n                if (minInterval < 10) {\n                    minInterval = 10;\n                }\n                if (tokenTimeoutId) {\n                    clearTimeout(tokenTimeoutId);\n                }\n                tokenTimeoutId = setTimeout(doTrackVerified, minInterval * 1000);\n            });\n            doTrackVerified();\n        });\n    }\n    static stopTrackingVerified() {\n        if (tokenTimeoutId) {\n            clearTimeout(tokenTimeoutId);\n        }\n    }\n    static getVerifiedLocationToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const lastTokenElapsed = (performance.now() - lastTokenNow) / 1000;\n            if (lastToken) {\n                if (lastTokenElapsed < (lastToken.expiresIn || 0)) {\n                    return lastToken;\n                }\n            }\n            return this.trackVerified({});\n        });\n    }\n    static setExpectedJurisdiction(countryCode, stateCode) {\n        expectedCountryCode = countryCode || null;\n        expectedStateCode = stateCode || null;\n    }\n    static onTokenUpdated(callback) {\n        tokenCallback = callback;\n    }\n}\n\nconst isSecretKey = (key) => (key.includes('_sk_'));\nconst isLiveKey = (key) => (key.includes('_live_'));\nlet Radar$1 = class Radar {\n    static get VERSION() {\n        return SDK_VERSION;\n    }\n    static initialize(publishableKey, options = {}) {\n        if (!publishableKey) {\n            throw new RadarPublishableKeyError('Publishable key required in initialization.');\n        }\n        if (isSecretKey(publishableKey)) {\n            throw new RadarPublishableKeyError('Secret keys are not allowed. Please use your Radar publishable key.');\n        }\n        // store settings in global config\n        const live = isLiveKey(publishableKey);\n        const logLevel = live ? 'error' : 'info';\n        const debug = !live;\n        const radarOptions = Object.assign(Config.defaultOptions, {\n            publishableKey,\n            live,\n            logLevel,\n            debug,\n        }, options);\n        Config.setup(radarOptions);\n        Logger.info(`initialized with ${live ? 'live' : 'test'} publishableKey.`);\n        if (options.debug) {\n            Logger.info(`using options: ${JSON.stringify(options)}`);\n        }\n        // NOTE(jasonl): this allows us to run jest tests\n        // without having to mock the ConfigAPI.getConfig call\n        if (!(window === null || window === void 0 ? void 0 : window.RADAR_TEST_ENV)) {\n            ConfigAPI.getConfig();\n        }\n    }\n    static clear() {\n        Config.clear();\n    }\n    ///////////////////////\n    // Geofencing Platform\n    ///////////////////////\n    static setUserId(userId) {\n        if (!userId) {\n            Storage.removeItem(Storage.USER_ID);\n            return;\n        }\n        Storage.setItem(Storage.USER_ID, String(userId).trim());\n    }\n    static setDescription(description) {\n        if (!description) {\n            Storage.removeItem(Storage.DESCRIPTION);\n            return;\n        }\n        Storage.setItem(Storage.DESCRIPTION, String(description).trim());\n    }\n    static setMetadata(metadata) {\n        if (!metadata) {\n            Storage.removeItem(Storage.METADATA);\n            return;\n        }\n        Storage.setItem(Storage.METADATA, JSON.stringify(metadata));\n    }\n    static getLocation() {\n        return Navigator.getCurrentPosition();\n    }\n    static trackOnce(params = {}) {\n        try {\n            return TrackAPI.trackOnce(params);\n        }\n        finally {\n            ConfigAPI.getConfig(params); // call with updated permissions\n        }\n    }\n    static trackVerified(params = {}) {\n        return VerifyAPI.trackVerified(params);\n    }\n    static startTrackingVerified(params) {\n        return VerifyAPI.startTrackingVerified(params);\n    }\n    static stopTrackingVerified() {\n        return VerifyAPI.stopTrackingVerified();\n    }\n    static getVerifiedLocationToken() {\n        return VerifyAPI.getVerifiedLocationToken();\n    }\n    static setExpectedJurisdiction(countryCode, stateCode) {\n        VerifyAPI.setExpectedJurisdiction(countryCode, stateCode);\n    }\n    static getContext(params) {\n        return ContextAPI.getContext(params);\n    }\n    static setTripOptions(tripOptions) {\n        TripsAPI.setTripOptions(tripOptions);\n    }\n    static clearTripOptions() {\n        TripsAPI.clearTripOptions();\n    }\n    static getTripOptions() {\n        return TripsAPI.getTripOptions();\n    }\n    static startTrip(tripOptions) {\n        return TripsAPI.startTrip(tripOptions);\n    }\n    static updateTrip(tripOptions) {\n        return TripsAPI.updateTrip(tripOptions);\n    }\n    static completeTrip() {\n        return TripsAPI.completeTrip();\n    }\n    static cancelTrip() {\n        return TripsAPI.cancelTrip();\n    }\n    static logConversion(params) {\n        return ConversionsAPI.logConversion(params);\n    }\n    ///////////////////////\n    // Listeners\n    ///////////////////////\n    static onTokenUpdated(callback) {\n        VerifyAPI.onTokenUpdated(callback);\n    }\n    /////////////////\n    // Maps Platform\n    /////////////////\n    static forwardGeocode(params) {\n        return Geocoding.forwardGeocode(params);\n    }\n    static reverseGeocode(params) {\n        return Geocoding.reverseGeocode(params);\n    }\n    static ipGeocode() {\n        return Geocoding.ipGeocode();\n    }\n    static autocomplete(params) {\n        return SearchAPI.autocomplete(params);\n    }\n    static searchGeofences(params) {\n        return SearchAPI.searchGeofences(params);\n    }\n    static searchPlaces(params) {\n        return SearchAPI.searchPlaces(params);\n    }\n    static validateAddress(params) {\n        return AddressesAPI.validateAddress(params);\n    }\n    static distance(params) {\n        return RoutingAPI.distance(params);\n    }\n    static matrix(params) {\n        return RoutingAPI.matrix(params);\n    }\n};\n\nclass RadarFeatureMouseEvent {\n    constructor(type, feature, originalEvent) {\n        this.type = type;\n        this.feature = feature;\n        this.originalEvent = originalEvent;\n    }\n}\nclass RadarMapFeature {\n    constructor(map, feature) {\n        var _a;\n        this._sourceIds = [];\n        this._layerIds = [];\n        this.id = ((_a = feature.id) !== null && _a !== void 0 ? _a : `feature-${Date.now()}`).toString();\n        // check for duplicate IDs\n        (map.getFeatures() || []).forEach((feature) => {\n            if (feature.id === this.id) {\n                throw new Error(`RadarMapFeature: feature with id ${this.id} already exists.`);\n            }\n        });\n        this.geometry = feature.geometry;\n        this.properties = feature.properties || {};\n        this._feature = feature;\n        this._map = map;\n    }\n    remove() {\n        // remove layers\n        this._layerIds.forEach((layerId) => {\n            if (this._map.getLayer(layerId)) {\n                this._map.removeLayer(layerId);\n            }\n        });\n        // remove source\n        this._sourceIds.forEach((sourceId) => {\n            if (this._map.getSource(sourceId)) {\n                this._map.removeSource(sourceId);\n            }\n        });\n        // remove reference from map\n        this._map._features = this._map._features.filter((other) => other.id !== this.id);\n    }\n    // register events with feature layer\n    on(eventType, callback) {\n        this._map.on(eventType, this.id, (event) => {\n            callback(new RadarFeatureMouseEvent(eventType, this, event));\n        });\n        // add pointer cursor if feature is clickable\n        if (eventType === 'click') {\n            this._map.on('mouseenter', this.id, () => {\n                this._map.getCanvas().style.cursor = 'pointer';\n            });\n            this._map.on('mouseleave', this.id, () => {\n                this._map.getCanvas().style.cursor = '';\n            });\n        }\n    }\n}\n\n/**\n * https://github.com/mapbox/polyline\n *\n * Decodes to a [longitude, latitude] coordinates array.\n *\n * This is adapted from the implementation in Project-OSRM.\n *\n * see https://github.com/Project-OSRM/osrm-frontend/blob/master/WebContent/routing/OSRM.RoutingGeometry.js\n *\n */\nconst decodePolyline = (str, precision = 6) => {\n    let index = 0;\n    let lat = 0;\n    let lng = 0;\n    let coordinates = [];\n    let shift = 0;\n    let result = 0;\n    let byte = null;\n    let latitudeChange;\n    let longitudeChange;\n    let factor = Math.pow(10, precision || 6);\n    // Coordinates have variable length when encoded, so just keep\n    // track of whether we've hit the end of the string. In each\n    // loop iteration, a single coordinate is decoded.\n    while (index < str.length) {\n        // Reset shift, result, and byte\n        byte = null;\n        shift = 0;\n        result = 0;\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n        latitudeChange = result & 1 ? ~(result >> 1) : result >> 1;\n        shift = result = 0;\n        do {\n            byte = str.charCodeAt(index++) - 63;\n            result |= (byte & 0x1f) << shift;\n            shift += 5;\n        } while (byte >= 0x20);\n        longitudeChange = result & 1 ? ~(result >> 1) : result >> 1;\n        lat += latitudeChange;\n        lng += longitudeChange;\n        coordinates.push([lng / factor, lat / factor]);\n    }\n    return coordinates;\n};\n\n// remove fields with undefined values from object\n// (top-level only)\nconst filterUndefined = (object) => {\n    const obj = {};\n    Object.entries(object).forEach(([key, value]) => {\n        if (value !== undefined) {\n            obj[key] = value;\n        }\n    });\n    return obj;\n};\n// deep merge nested objects - returns a new object\n// (arrays are concatenated)\nconst mergeDeep = (target, source = {}) => {\n    let output = Object.assign({}, target);\n    for (const key in source) {\n        if (source[key] instanceof Object && !Array.isArray(source[key]) && key in target) {\n            output[key] = mergeDeep(target[key], source[key]);\n        }\n        else if (Array.isArray(source[key]) && Array.isArray(target[key])) {\n            output[key] = target[key].concat(source[key]);\n        }\n        else {\n            output[key] = source[key];\n        }\n    }\n    return output;\n};\n\nconst defaultLineOptions = {\n    paint: {\n        'line-cap': 'round',\n        'line-color': '#000257',\n        'line-width': 4,\n        'border-color': '#FFFFFF',\n        'border-width': 2,\n    }\n};\nclass RadarLineFeature extends RadarMapFeature {\n    constructor(map, feature, lineOptions) {\n        super(map, feature);\n        const featureId = this.id;\n        const options = mergeDeep(defaultLineOptions, lineOptions);\n        // use a callback to account for the async loading of the map\n        const addFeatureToMap = () => {\n            options.paint = options.paint || {};\n            // add source for feature\n            map.addSource(featureId, { type: 'geojson', data: feature });\n            this._sourceIds.push(featureId);\n            // add border layer if border styling is present\n            if (options.paint['line-width'] && options.paint['border-width']) {\n                const borderLayerId = `${featureId}-border`;\n                const borderWidth = options.paint['line-width'] + options.paint['border-width'];\n                map.addLayer({\n                    id: borderLayerId,\n                    source: featureId,\n                    type: 'line',\n                    layout: {\n                        'line-cap': options.paint['line-cap'],\n                    },\n                    paint: filterUndefined({\n                        'line-color': options.paint['border-color'],\n                        'line-opacity': options.paint['border-opacity'],\n                        'line-width': borderWidth,\n                    }),\n                });\n                this._layerIds.push(borderLayerId); // border layer\n            }\n            // line-layer\n            map.addLayer({\n                id: featureId,\n                source: featureId,\n                type: 'line',\n                layout: {\n                    'line-cap': options.paint['line-cap'],\n                },\n                paint: filterUndefined({\n                    'line-color': options.paint['line-color'],\n                    'line-width': options.paint['line-width'],\n                    'line-opacity': options.paint['line-opacity'],\n                    'line-offset': options.paint['line-offset'],\n                    'line-blur': options.paint['line-blur'],\n                    'line-dasharray': options.paint['line-dasharray'],\n                    'line-gap-width': options.paint['line-gap-width'],\n                    'line-gradient': options.paint['line-gradient'],\n                }),\n            });\n            this._layerIds.push(featureId); // line layer\n        };\n        // ensure map is ready before modifying source and layers\n        if (map.loaded()) {\n            addFeatureToMap();\n        }\n        else {\n            map.once('data', () => {\n                addFeatureToMap();\n            });\n        }\n        return this;\n    }\n    static fromPolyline(map, polyline, polylineOptions) {\n        const featureId = (polylineOptions === null || polylineOptions === void 0 ? void 0 : polylineOptions.id) || `polyline-feature-${Date.now()}`;\n        const coordinates = decodePolyline(polyline, polylineOptions === null || polylineOptions === void 0 ? void 0 : polylineOptions.precision);\n        const feature = {\n            id: featureId,\n            type: 'Feature',\n            geometry: {\n                type: 'LineString',\n                coordinates,\n            },\n            properties: (polylineOptions === null || polylineOptions === void 0 ? void 0 : polylineOptions.properties) || {},\n        };\n        const lineFeature = new RadarLineFeature(map, feature, polylineOptions);\n        return lineFeature;\n    }\n}\n\nconst defaultPolygonOptions = {\n    paint: {\n        'fill-color': '#FF6F00',\n        'fill-opacity': 0.3,\n        'border-color': '#FF6F00',\n        'border-opacity': 1,\n        'border-width': 2,\n    }\n};\nclass RadarPolygonFeature extends RadarMapFeature {\n    constructor(map, feature, polygonOptions) {\n        super(map, feature);\n        const featureId = this.id;\n        const options = mergeDeep(defaultPolygonOptions, polygonOptions);\n        // use a callback to account for the async loading of the map\n        const addFeatureToMap = () => {\n            options.paint = options.paint || {};\n            // add source for feature\n            map.addSource(featureId, { type: 'geojson', data: feature });\n            this._sourceIds.push(featureId);\n            // polygon-layer\n            map.addLayer({\n                id: featureId,\n                source: featureId,\n                type: 'fill',\n                layout: {},\n                paint: filterUndefined({\n                    'fill-color': options.paint['fill-color'],\n                    'fill-opacity': options.paint['fill-opacity'],\n                }),\n            });\n            this._layerIds.push(featureId);\n            // border layer\n            if (options.paint['border-color'] && options.paint['border-width'] && options.paint['border-opacity']) {\n                let borderLayerId = `${featureId}-border`;\n                map.addLayer({\n                    id: borderLayerId,\n                    source: featureId,\n                    type: 'line',\n                    layout: {},\n                    paint: filterUndefined({\n                        'line-color': options.paint['border-color'],\n                        'line-opacity': options.paint['border-opacity'],\n                        'line-width': options.paint['border-width'],\n                    }),\n                });\n                this._layerIds.push(borderLayerId);\n            }\n        };\n        // ensure map is ready before modifying source and layers\n        if (map.loaded()) {\n            addFeatureToMap();\n        }\n        else {\n            map.once('data', () => {\n                addFeatureToMap();\n            });\n        }\n        return this;\n    }\n}\n\nconst RADAR_LOGO_URL = 'https://api.radar.io/maps/static/images/logo.svg';\nclass RadarLogoControl {\n    onAdd() {\n        const img = document.createElement('img');\n        img.src = RADAR_LOGO_URL;\n        img.alt = 'Radar Maps Platform';\n        this.link = document.createElement('a');\n        this.link.id = 'radar-map-logo';\n        this.link.href = 'https://radar.com?ref=powered_by_radar';\n        this.link.target = '_blank';\n        this.link.appendChild(img);\n        return this.link;\n    }\n    onRemove() {\n        var _a;\n        (_a = this.link) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n}\n\nconst append = (dest, src) => {\n    src.forEach((coord) => {\n        dest.push(coord);\n    });\n};\n// return array of all coordinates in a feature\nconst getCoords = (feature) => {\n    const coordinates = [];\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n        case 'Point':\n            coordinates.push(geometry.coordinates);\n            break;\n        case 'MultiPoint':\n        case 'LineString':\n            append(coordinates, geometry.coordinates);\n            break;\n        case 'MultiLineString':\n        case 'Polygon':\n            geometry.coordinates.forEach(coords => append(coordinates, coords));\n            break;\n        case 'MultiPolygon':\n            geometry.coordinates.forEach(polygon => {\n                polygon.forEach(coords => append(coordinates, coords));\n            });\n            break;\n        default:\n            return coordinates;\n    }\n    return coordinates;\n};\n// return all coordinates from a list of feature\nconst getAllCoords = (features) => {\n    const coordinates = [];\n    (features || []).forEach((feature) => {\n        const coords = getCoords(feature);\n        coords.forEach((coord) => {\n            coordinates.push(coord);\n        });\n    });\n    return coordinates;\n};\n\nconst DEFAULT_STYLE = 'radar-default-v1';\nconst RADAR_STYLES = [\n    'radar-default-v1',\n    'radar-light-v1',\n    'radar-dark-v1',\n];\n// Radar specific configs\nconst defaultRadarMapOptions = {\n    showZoomControls: true,\n};\nconst defaultMaplibreOptions = {\n    minZoom: 1,\n    maxZoom: 20,\n    attributionControl: false,\n    dragRotate: false,\n    touchPitch: false,\n    maplibreLogo: false,\n};\nconst defaultFitMarkersOptions = {\n    padding: 50,\n};\nconst createStyleURL = (options, mapOptions) => {\n    const style = mapOptions.style || DEFAULT_STYLE;\n    let url = `${options.host}/maps/styles/${style}`;\n    if (mapOptions.language) {\n        url += `?language=${mapOptions.language}`;\n    }\n    return url;\n};\n// check if style is a Radar style or a custom style\nconst isRadarStyle = (style) => {\n    if (RADAR_STYLES.includes(style)) { // Radar built-in style\n        return true;\n    }\n    if (!/^(http:|https:)/.test(style)) { // Radar custom style (not a URL)\n        return true;\n    }\n    return false;\n};\n// use formatted style URL if using one of Radar's out-of-the-box styles or is a Radar custom style\nconst getStyle = (options, mapOptions) => {\n    const style = mapOptions.style;\n    if (!style || (typeof style === 'string' && isRadarStyle(style))) {\n        return createStyleURL(options, mapOptions);\n    }\n    return mapOptions.style; // style object or URL\n};\nclass RadarMap extends maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Map {\n    constructor(radarMapOptions) {\n        const config = Config.get();\n        if (!config.publishableKey) {\n            Logger.warn('publishableKey not set. Call Radar.initialize() with key before creating a new map.');\n        }\n        // configure map options\n        const style = getStyle(config, radarMapOptions);\n        const mapOptions = Object.assign({}, defaultRadarMapOptions, defaultMaplibreOptions, radarMapOptions, { style });\n        Logger.debug(`initialize map with options: ${JSON.stringify(mapOptions)}`);\n        mapOptions.transformRequest = (url, resourceType) => {\n            // this handles when a style is switched\n            if (resourceType === 'Style' && isRadarStyle(url)) {\n                url = createStyleURL(config, Object.assign(Object.assign({}, mapOptions), { style: url }));\n            }\n            let headers = {\n                'Authorization': config.publishableKey,\n                'X-Radar-Device-Type': 'Web',\n                'X-Radar-SDK-Version': SDK_VERSION,\n            };\n            if (typeof config.getRequestHeaders === 'function') {\n                headers = Object.assign(headers, config.getRequestHeaders());\n            }\n            return { url, headers };\n        };\n        super(mapOptions); // initialize MapLibre instance\n        this._markers = [];\n        this._features = [];\n        const container = this.getContainer();\n        if (!container.style.width && !container.style.height) {\n            Logger.warn('map container does not have a set \"width\" or \"height\"');\n        }\n        // add radar logo\n        const radarLogo = new RadarLogoControl();\n        this.addControl(radarLogo, 'bottom-left');\n        // add attribution\n        const attribution = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.AttributionControl({ compact: false });\n        this.addControl(attribution, 'bottom-right');\n        // add zoom controls\n        const nav = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.NavigationControl({\n            showCompass: false,\n            showZoom: mapOptions.showZoomControls,\n        });\n        this.addControl(nav, 'bottom-right');\n        // handle map resize actions\n        const onResize = () => {\n            const attrib = document.querySelector('.maplibregl-ctrl-attrib');\n            if (attrib) {\n                const width = this.getContainer().clientWidth;\n                if (width < 380) {\n                    attrib.classList.add('hidden');\n                }\n                else {\n                    attrib.classList.remove('hidden');\n                }\n            }\n        };\n        this.on('resize', onResize);\n        this.on('load', onResize);\n    }\n    addMarker(marker) {\n        this._markers.push(marker);\n    }\n    removeMarker(marker) {\n        this._markers = this._markers.filter((mapMarker) => mapMarker !== marker);\n    }\n    getMarkers() {\n        return this._markers;\n    }\n    fitToMarkers(fitBoundsOptions = {}, overrideMarkers) {\n        const markers = overrideMarkers || this.getMarkers();\n        if (markers.length === 0) {\n            return;\n        }\n        const bounds = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.LngLatBounds();\n        markers.forEach((marker) => {\n            bounds.extend(marker.getLngLat());\n        });\n        const options = Object.assign(defaultFitMarkersOptions, fitBoundsOptions);\n        this.fitBounds(bounds, options);\n    }\n    clearMarkers() {\n        this._markers.forEach((marker) => {\n            marker.remove();\n        });\n    }\n    getFeatures() {\n        return this._features;\n    }\n    fitToFeatures(fitBoundsOptions = {}, overrideFeatures) {\n        const features = (overrideFeatures || this._features).map((mapFeature) => mapFeature._feature);\n        const coords = getAllCoords(features);\n        if (coords.length > 0) {\n            const bounds = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.LngLatBounds();\n            coords.forEach((coord) => {\n                bounds.extend(coord);\n            });\n            this.fitBounds(bounds, fitBoundsOptions);\n        }\n    }\n    // remove all features from the map\n    clearFeatures() {\n        this._features.forEach((feature) => {\n            feature.remove();\n        });\n    }\n    addPolygon(polygon, polygonOptions) {\n        const feature = new RadarPolygonFeature(this, polygon, polygonOptions);\n        this._features.push(feature);\n        return feature;\n    }\n    addLine(line, lineOptions) {\n        const feature = new RadarLineFeature(this, line, lineOptions);\n        this._features.push(feature);\n        return feature;\n    }\n    addPolyline(polyline, polylineOptions) {\n        const feature = RadarLineFeature.fromPolyline(this, polyline, polylineOptions);\n        this._features.push(feature);\n        return feature;\n    }\n}\n\nclass RadarMarkerMouseEvent {\n    constructor(type, marker, originalEvent) {\n        this.target = marker;\n        this.originalEvent = originalEvent;\n        this.point = marker._pos;\n        this.lngLat = marker.getLngLat();\n        this.type = type;\n    }\n}\n// cache URL loaded markers\nconst IMAGE_CACHE = new Map();\nconst useCachedImage = (url, timeoutMS = 5000) => new Promise((resolve, reject) => {\n    if (!IMAGE_CACHE.has(url)) { // nothing in cache\n        IMAGE_CACHE.set(url, 'pending'); // request in flight\n        return reject('miss');\n    }\n    const start = Date.now();\n    const interval = setInterval(() => {\n        const cachedData = IMAGE_CACHE.get(url);\n        if (cachedData === 'pending') {\n            if ((Date.now() - start) > timeoutMS) { // cache lookup took too long\n                clearInterval(interval);\n                reject('timed out');\n            }\n        }\n        else if (cachedData === 'failed') { // request failed\n            clearInterval(interval);\n            reject('failed');\n        }\n        else if (cachedData !== undefined) { // return data\n            clearInterval(interval);\n            resolve(cachedData);\n        }\n    }, 100);\n});\nconst createImageElement = (options) => {\n    const element = document.createElement('img');\n    element.src = options.url;\n    if (options.width) {\n        if (typeof options.width === 'number') {\n            element.width = options.width;\n        }\n        else {\n            element.style.width = options.width;\n        }\n    }\n    if (options.height) {\n        if (typeof options.height === 'number') {\n            element.height = options.height;\n        }\n        else {\n            element.style.height = options.height;\n        }\n    }\n    if (!options.width && !options.height) {\n        element.style.maxWidth = '64px';\n        element.style.maxHeight = '64px';\n        element.style.width = '100%';\n        element.style.height = '100%';\n    }\n    return element;\n};\nconst defaultMarkerOptions = {\n    color: '#000257',\n};\nclass RadarMarker extends maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Marker {\n    constructor(markerOptions) {\n        const maplibreOptions = Object.assign({}, defaultMarkerOptions);\n        // init MapLibre marker configs\n        if (markerOptions.color) {\n            maplibreOptions.color = markerOptions.color;\n        }\n        if (markerOptions.element) {\n            maplibreOptions.element = markerOptions.element;\n        }\n        if (markerOptions.scale) {\n            maplibreOptions.scale = markerOptions.scale;\n        }\n        super(maplibreOptions);\n        // handle marker images (Radar marker, or custom URL)\n        if (markerOptions.marker || markerOptions.url) {\n            const originalElement = this._element.cloneNode(true);\n            this._element.childNodes.forEach((child) => {\n                child.remove();\n            });\n            const onSuccess = (url) => {\n                this._element.replaceChildren(createImageElement({\n                    width: markerOptions.width,\n                    height: markerOptions.height,\n                    url,\n                }));\n            };\n            const onError = (err) => {\n                Logger.error(`Could not load marker: ${err.message} - falling back to default marker`);\n                IMAGE_CACHE.set(markerOptions.url, 'failed'); // mark as failed\n                this._element.replaceChildren(...Array.from(originalElement.childNodes));\n            };\n            // custom URL image\n            if (markerOptions.url) {\n                const loadImage = () => {\n                    fetch(markerOptions.url)\n                        .then(res => {\n                        if (res.status === 200) {\n                            res.blob()\n                                .then((data) => {\n                                const url = URL.createObjectURL(data);\n                                IMAGE_CACHE.set(markerOptions.url, url); // cache data\n                                onSuccess(url);\n                            })\n                                .catch(onError);\n                        }\n                        else {\n                            onError(new Error(res.statusText));\n                        }\n                    })\n                        .catch(onError);\n                };\n                // attempt to use cached data, otherwise fetch marker image data from URL\n                useCachedImage(markerOptions.url)\n                    .then(onSuccess)\n                    .catch((reason) => {\n                    if (reason !== 'miss') {\n                        Logger.debug(`RadarMarker: cache lookup for ${markerOptions.url}: ${reason}`);\n                    }\n                    loadImage();\n                });\n            }\n            // Radar hosted image\n            if (markerOptions.marker) {\n                const loadMarker = () => {\n                    Http.request({\n                        method: 'GET',\n                        version: 'maps',\n                        path: `markers/${markerOptions.marker}`,\n                        responseType: 'blob',\n                    })\n                        .then(({ data }) => {\n                        const url = URL.createObjectURL(data);\n                        IMAGE_CACHE.set(markerOptions.marker, url); // cache data\n                        onSuccess(url);\n                    })\n                        .catch(onError);\n                };\n                useCachedImage(markerOptions.marker)\n                    .then(onSuccess)\n                    .catch((reason) => {\n                    if (reason !== 'miss') {\n                        Logger.debug(`RadarMarker: cache lookup for ${markerOptions.marker} ${reason}`);\n                    }\n                    loadMarker();\n                });\n            }\n        }\n        // handle deprecated popup options\n        if (markerOptions.text) {\n            Logger.warn('marker option \"text\" is deprecated, and will be removed in a future version. Use \"popup.text\".');\n            markerOptions.popup = markerOptions.popup || {};\n            markerOptions.popup.text = markerOptions.text;\n        }\n        if (markerOptions.html) {\n            Logger.warn('marker option \"html\" is deprecated, and will be removed in a future version. Use \"popup.html\".');\n            markerOptions.popup = markerOptions.popup || {};\n            markerOptions.popup.html = markerOptions.html;\n        }\n        // set popup text or HTML\n        if (markerOptions.popup) {\n            const popup = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Popup(markerOptions.popup);\n            if (markerOptions.popup.text) {\n                popup.setText(markerOptions.popup.text);\n            }\n            if (markerOptions.popup.html) {\n                popup.setHTML(markerOptions.popup.html);\n            }\n            if (markerOptions.popup.element) {\n                popup.setDOMContent(markerOptions.popup.element);\n            }\n            this.setPopup(popup);\n        }\n        // pass-through click event from element to marker\n        const element = this.getElement();\n        if (element) {\n            element.addEventListener('click', (e) => {\n                e.stopPropagation(); // prevent clicks from propagating to map\n                // since we're stopping the propagation to map,\n                // we need to manually toggle the popup associated with the marker\n                if (this.getPopup()) {\n                    // close any other open popups\n                    (this._map.getMarkers() || []).forEach((otherMarker) => {\n                        var _a;\n                        if ((_a = otherMarker.getPopup()) === null || _a === void 0 ? void 0 : _a.isOpen()) {\n                            otherMarker.togglePopup();\n                        }\n                    });\n                    this.togglePopup();\n                }\n                this.fire('click', new RadarMarkerMouseEvent('click', this, e));\n            });\n        }\n    }\n    addTo(map) {\n        map.addMarker(this);\n        return super.addTo(map);\n    }\n    remove() {\n        if (this._map) {\n            this._map.removeMarker(this);\n        }\n        return super.remove();\n    }\n}\n\nclass RadarPopup extends maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Popup {\n    constructor(popupOptions) {\n        super(popupOptions);\n        if (popupOptions.text) {\n            this.setText(popupOptions.text);\n        }\n        if (popupOptions.html) {\n            this.setHTML(popupOptions.html);\n        }\n        if (popupOptions.element) {\n            this.setDOMContent(popupOptions.element);\n        }\n    }\n}\n\nclass MapUI {\n    static getMapLibre() {\n        return maplibre_gl__WEBPACK_IMPORTED_MODULE_0__;\n    }\n    static createMap(mapOptions) {\n        const radarMap = new RadarMap(mapOptions);\n        return radarMap;\n    }\n    static createMarker(markerOptions = {}) {\n        const radarMarker = new RadarMarker(markerOptions);\n        return radarMarker;\n    }\n    static createPopup(popupOptions) {\n        const popup = new RadarPopup(popupOptions);\n        return popup;\n    }\n}\n\nconst CLASSNAMES = {\n    WRAPPER: 'radar-autocomplete-wrapper',\n    INPUT: 'radar-autocomplete-input',\n    SEARCH_ICON: 'radar-autocomplete-search-icon',\n    RESULTS_LIST: 'radar-autocomplete-results-list',\n    RESULTS_ITEM: 'radar-autocomplete-results-item',\n    RESULTS_MARKER: 'radar-autocomplete-results-marker',\n    SELECTED_ITEM: 'radar-autocomplete-results-item-selected',\n    POWERED_BY_RADAR: 'radar-powered',\n    NO_RESULTS: 'radar-no-results',\n};\nconst defaultAutocompleteOptions = {\n    container: 'autocomplete',\n    debounceMS: 200,\n    minCharacters: 3,\n    limit: 8,\n    placeholder: 'Search address',\n    responsive: true,\n    disabled: false,\n    showMarkers: true,\n    hideResultsOnBlur: true,\n};\n// determine whether to use px or CSS string\nconst formatCSSValue = (value) => {\n    if (typeof value === 'number') {\n        return `${value}px`;\n    }\n    return value;\n};\nconst DEFAULT_WIDTH = 400;\nconst setWidth = (input, options) => {\n    // if responsive and width is provided, treat it as maxWidth\n    if (options.responsive) {\n        input.style.width = '100%';\n        if (options.width) {\n            input.style.maxWidth = formatCSSValue(options.width);\n        }\n        return;\n    }\n    // if not responsive, set fixed width and unset maxWidth\n    input.style.width = formatCSSValue(options.width || DEFAULT_WIDTH);\n    input.style.removeProperty('max-width');\n};\nconst setHeight = (resultsList, options) => {\n    if (options.maxHeight) {\n        resultsList.style.maxHeight = formatCSSValue(options.maxHeight);\n        resultsList.style.overflowY = 'auto'; /* allow overflow when maxHeight is applied */\n    }\n};\nconst getMarkerIcon = (color = \"#ACBDC8\") => {\n    const fill = color.replace('#', '%23');\n    const svg = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M12.5704 6.57036C12.5704 4.11632 10.6342 2.11257 8.21016 2C8.14262 2 8.06757 2 8.00003 2C7.93249 2 7.85744 2 7.7899 2C5.35838 2.11257 3.42967 4.11632 3.42967 6.57036C3.42967 6.60037 3.42967 6.6379 3.42967 6.66792C3.42967 6.69794 3.42967 6.73546 3.42967 6.76548C3.42967 9.46717 7.09196 13.3621 7.4672 13.7598C7.61729 13.9174 7.84994 14 8.00003 14C8.15012 14 8.38277 13.9174 8.53286 13.7598C8.9156 13.3621 12.5704 9.46717 12.5704 6.76548C12.5704 6.72795 12.5704 6.69794 12.5704 6.66792C12.5704 6.6379 12.5704 6.60037 12.5704 6.57036ZM7.99252 8.28893C7.04693 8.28893 6.27395 7.52345 6.27395 6.57036C6.27395 5.61726 7.03943 4.85178 7.99252 4.85178C8.94562 4.85178 9.7111 5.61726 9.7111 6.57036C9.7111 7.52345 8.94562 8.28893 7.99252 8.28893Z\" fill=\"${fill}\"/>\n  </svg>`.trim();\n    return `data:image/svg+xml;charset=utf-8,${svg}`;\n};\nclass AutocompleteUI {\n    // create a new AutocompleteUI instance\n    static createAutocomplete(autocompleteOptions) {\n        return new AutocompleteUI(autocompleteOptions);\n    }\n    constructor(options = {}) {\n        this.config = Object.assign({}, defaultAutocompleteOptions, options);\n        // setup state\n        this.isOpen = false;\n        this.debouncedFetchResults = this.debounce(this.fetchResults, this.config.debounceMS);\n        this.results = [];\n        this.highlightedIndex = -1;\n        // set threshold alias\n        if (this.config.threshold !== undefined) {\n            this.config.minCharacters = this.config.threshold;\n            Logger.warn('AutocompleteUI option \"threshold\" is deprecated, use \"minCharacters\" instead.');\n        }\n        if (options.near) {\n            if (typeof options.near === 'string') {\n                this.near = options.near;\n            }\n            else {\n                this.near = `${options.near.latitude},${options.near.longitude}`;\n            }\n        }\n        // get container element\n        let containerEL;\n        if (typeof this.config.container === 'string') { // lookup container element by ID\n            containerEL = document.getElementById(this.config.container);\n        }\n        else { // use provided element\n            containerEL = this.config.container; // HTMLElement\n        }\n        if (!containerEL) {\n            throw new RadarAutocompleteContainerNotFound(`Could not find container element: ${this.config.container}`);\n        }\n        this.container = containerEL;\n        // create wrapper for input and result list\n        this.wrapper = document.createElement('div');\n        this.wrapper.classList.add(CLASSNAMES.WRAPPER);\n        this.wrapper.style.display = this.config.responsive ? 'block' : 'inline-block';\n        setWidth(this.wrapper, this.config);\n        // result list element\n        this.resultsList = document.createElement('ul');\n        this.resultsList.classList.add(CLASSNAMES.RESULTS_LIST);\n        this.resultsList.setAttribute('id', CLASSNAMES.RESULTS_LIST);\n        this.resultsList.setAttribute('role', 'listbox');\n        this.resultsList.setAttribute('aria-live', 'polite');\n        this.resultsList.setAttribute('aria-label', 'Search results');\n        setHeight(this.resultsList, this.config);\n        if (containerEL.nodeName === 'INPUT') {\n            // if an <input> element is provided, use that as the inputField,\n            // and append the resultList to it's parent container\n            this.inputField = containerEL;\n            // append to dom\n            this.wrapper.appendChild(this.resultsList);\n            containerEL.parentNode.appendChild(this.wrapper);\n        }\n        else {\n            // if container is not an input, create new input and append to container\n            // create new input\n            this.inputField = document.createElement('input');\n            this.inputField.classList.add(CLASSNAMES.INPUT);\n            this.inputField.placeholder = this.config.placeholder;\n            this.inputField.type = 'text';\n            this.inputField.disabled = this.config.disabled;\n            // search icon\n            const searchIcon = document.createElement('div');\n            searchIcon.classList.add(CLASSNAMES.SEARCH_ICON);\n            // append to DOM\n            this.wrapper.appendChild(this.inputField);\n            this.wrapper.appendChild(this.resultsList);\n            this.wrapper.appendChild(searchIcon);\n            this.container.appendChild(this.wrapper);\n        }\n        // disable browser autofill\n        this.inputField.setAttribute('autocomplete', 'off');\n        // set aria roles\n        this.inputField.setAttribute('role', 'combobox');\n        this.inputField.setAttribute('aria-controls', CLASSNAMES.RESULTS_LIST);\n        this.inputField.setAttribute('aria-expanded', 'false');\n        this.inputField.setAttribute('aria-haspopup', 'listbox');\n        this.inputField.setAttribute('aria-autocomplete', 'list');\n        this.inputField.setAttribute('aria-activedescendant', '');\n        // setup event listeners\n        this.inputField.addEventListener('input', this.handleInput.bind(this));\n        this.inputField.addEventListener('keydown', this.handleKeyboardNavigation.bind(this));\n        if (this.config.hideResultsOnBlur) {\n            this.inputField.addEventListener('blur', this.close.bind(this), true);\n        }\n        Logger.debug(`AutocompleteUI iniailized with options: ${JSON.stringify(this.config)}`);\n    }\n    handleInput() {\n        // Fetch autocomplete results and display them\n        const query = this.inputField.value;\n        if (query.length < this.config.minCharacters) {\n            return;\n        }\n        this.debouncedFetchResults(query)\n            .then((results) => {\n            const onResults = this.config.onResults;\n            if (onResults) {\n                onResults(results);\n            }\n            this.displayResults(results);\n        })\n            .catch((error) => {\n            Logger.warn(`Autocomplete ui error: ${error.message}`);\n            const onError = this.config.onError;\n            if (onError) {\n                onError(error);\n            }\n        });\n    }\n    debounce(fn, delay) {\n        let timeoutId;\n        let resolveFn;\n        let rejectFn;\n        return (...args) => {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => {\n                const result = fn.apply(this, args);\n                if (result instanceof Promise) {\n                    result\n                        .then((value) => {\n                        if (resolveFn) {\n                            resolveFn(value);\n                        }\n                    })\n                        .catch((error) => {\n                        if (rejectFn) {\n                            rejectFn(error);\n                        }\n                    });\n                }\n            }, delay);\n            return new Promise((resolve, reject) => {\n                resolveFn = resolve;\n                rejectFn = reject;\n            });\n        };\n    }\n    fetchResults(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { limit, layers, countryCode, expandUnits, mailable, onRequest } = this.config;\n            const params = {\n                query,\n                limit,\n                layers,\n                countryCode,\n                expandUnits,\n                mailable,\n            };\n            if (this.near) {\n                params.near = this.near;\n            }\n            if (onRequest) {\n                onRequest(params);\n            }\n            const { addresses } = yield SearchAPI.autocomplete(params, 'autocomplete-ui');\n            return addresses;\n        });\n    }\n    displayResults(results) {\n        // Clear the previous results\n        this.clearResultsList();\n        this.results = results;\n        let marker;\n        if (this.config.showMarkers) {\n            marker = document.createElement('img');\n            marker.classList.add(CLASSNAMES.RESULTS_MARKER);\n            marker.setAttribute('src', getMarkerIcon(this.config.markerColor));\n        }\n        // Create and append list items for each result\n        results.forEach((result, index) => {\n            const li = document.createElement('li');\n            li.classList.add(CLASSNAMES.RESULTS_ITEM);\n            li.setAttribute('role', 'option');\n            li.setAttribute('id', `${CLASSNAMES.RESULTS_ITEM}}-${index}`);\n            // construct result with bolded label\n            let listContent;\n            if (result.formattedAddress.includes(result.addressLabel) && result.layer !== 'postalCode') {\n                // if addressLabel is contained in the formatted address, bold the address label\n                const regex = new RegExp(`(${result.addressLabel}),?`);\n                listContent = result.formattedAddress.replace(regex, '<b>$1</b>');\n            }\n            else {\n                // otherwise append the address or place label to formatted address\n                const label = result.placeLabel || result.addressLabel;\n                listContent = `<b>${label}</b> ${result.formattedAddress}`;\n            }\n            li.innerHTML = listContent;\n            // prepend marker if enabled\n            if (marker) {\n                li.prepend(marker.cloneNode());\n            }\n            // add click handler to each result, use mousedown to fire before blur event\n            li.addEventListener('mousedown', () => {\n                this.select(index);\n            });\n            this.resultsList.appendChild(li);\n        });\n        this.open();\n        if (results.length > 0) {\n            const link = document.createElement('a');\n            link.href = 'https://radar.com?ref=powered_by_radar';\n            link.target = '_blank';\n            this.poweredByLink = link;\n            const poweredByText = document.createElement('span');\n            poweredByText.textContent = 'Powered by';\n            link.appendChild(poweredByText);\n            const radarLogo = document.createElement('span');\n            radarLogo.id = 'radar-powered-logo';\n            radarLogo.textContent = 'Radar';\n            link.appendChild(radarLogo);\n            const poweredByContainer = document.createElement('div');\n            poweredByContainer.classList.add(CLASSNAMES.POWERED_BY_RADAR);\n            poweredByContainer.appendChild(link);\n            this.resultsList.appendChild(poweredByContainer);\n        }\n        else {\n            const noResultsText = document.createElement('div');\n            noResultsText.classList.add(CLASSNAMES.NO_RESULTS);\n            noResultsText.textContent = 'No results';\n            this.resultsList.appendChild(noResultsText);\n        }\n    }\n    open() {\n        if (this.isOpen) {\n            return;\n        }\n        this.inputField.setAttribute('aria-expanded', 'true');\n        this.resultsList.removeAttribute('hidden');\n        this.isOpen = true;\n    }\n    close(e) {\n        if (!this.isOpen) {\n            return;\n        }\n        // run this code async to allow link click to propagate before blur\n        // (add 100ms delay if closed from link click)\n        const linkClick = e && (e.relatedTarget === this.poweredByLink);\n        setTimeout(() => {\n            this.inputField.setAttribute('aria-expanded', 'false');\n            this.inputField.setAttribute('aria-activedescendant', '');\n            this.resultsList.setAttribute('hidden', '');\n            this.highlightedIndex = -1;\n            this.isOpen = false;\n            this.clearResultsList();\n        }, linkClick ? 100 : 0);\n    }\n    goTo(index) {\n        if (!this.isOpen || !this.results.length) {\n            return;\n        }\n        // wrap around\n        if (index < 0) {\n            index = this.results.length - 1;\n        }\n        else if (index >= this.results.length) {\n            index = 0;\n        }\n        const resultItems = this.resultsList.getElementsByTagName('li');\n        if (this.highlightedIndex > -1) {\n            // clear class names on previously highlighted item\n            resultItems[this.highlightedIndex].classList.remove(CLASSNAMES.SELECTED_ITEM);\n        }\n        // add class name to newly highlighted item\n        resultItems[index].classList.add(CLASSNAMES.SELECTED_ITEM);\n        // set aria active descendant\n        this.inputField.setAttribute('aria-activedescendant', `${CLASSNAMES.RESULTS_ITEM}-${index}`);\n        this.highlightedIndex = index;\n    }\n    handleKeyboardNavigation(event) {\n        let key = event.key;\n        // allow event to propagate if result list is not open\n        if (!this.isOpen) {\n            return;\n        }\n        // treat shift+tab as up key\n        if (key === 'Tab' && event.shiftKey) {\n            key = 'ArrowUp';\n        }\n        switch (key) {\n            // Next item\n            case 'Tab':\n            case 'ArrowDown':\n                event.preventDefault();\n                this.goTo(this.highlightedIndex + 1);\n                break;\n            // Prev item\n            case 'ArrowUp':\n                event.preventDefault();\n                this.goTo(this.highlightedIndex - 1);\n                break;\n            // Select\n            case 'Enter':\n                this.select(this.highlightedIndex);\n                break;\n            // Close\n            case 'Esc':\n                this.close();\n                break;\n        }\n    }\n    select(index) {\n        const result = this.results[index];\n        if (!result) {\n            Logger.warn(`No autocomplete result found at index: ${index}`);\n            return;\n        }\n        let inputValue;\n        if (result.formattedAddress.includes(result.addressLabel)) {\n            inputValue = result.formattedAddress;\n        }\n        else {\n            const label = result.placeLabel || result.addressLabel;\n            inputValue = `${label}, ${result.formattedAddress}`;\n        }\n        this.inputField.value = inputValue;\n        const onSelection = this.config.onSelection;\n        if (onSelection) {\n            onSelection(result);\n        }\n        // clear results list\n        this.close();\n    }\n    clearResultsList() {\n        this.resultsList.innerHTML = '';\n        this.results = [];\n    }\n    // remove elements from DOM\n    remove() {\n        Logger.debug('AutocompleteUI removed.');\n        this.inputField.remove();\n        this.resultsList.remove();\n        this.wrapper.remove();\n    }\n    setNear(near) {\n        if (near === undefined || near === null) {\n            this.near = undefined;\n        }\n        else if (typeof near === 'string') {\n            this.near = near;\n        }\n        else {\n            this.near = `${near.latitude},${near.longitude}`;\n        }\n        return this;\n    }\n    setPlaceholder(placeholder) {\n        this.config.placeholder = placeholder;\n        this.inputField.placeholder = placeholder;\n        return this;\n    }\n    setDisabled(disabled) {\n        this.config.disabled = disabled;\n        this.inputField.disabled = disabled;\n        return this;\n    }\n    setResponsive(responsive) {\n        this.config.responsive = responsive;\n        setWidth(this.wrapper, this.config);\n        return this;\n    }\n    setWidth(width) {\n        this.config.width = width;\n        setWidth(this.wrapper, this.config);\n        return this;\n    }\n    setMaxHeight(height) {\n        this.config.maxHeight = height;\n        setHeight(this.resultsList, this.config);\n        return this;\n    }\n    setMinCharacters(minCharacters) {\n        this.config.minCharacters = minCharacters;\n        this.config.threshold = minCharacters;\n        return this;\n    }\n    setLimit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    setShowMarkers(showMarkers) {\n        this.config.showMarkers = showMarkers;\n        if (showMarkers) {\n            const marker = document.createElement('img');\n            marker.classList.add(CLASSNAMES.RESULTS_MARKER);\n            marker.setAttribute('src', getMarkerIcon(this.config.markerColor));\n            const resultItems = this.resultsList.getElementsByTagName('li');\n            for (let i = 0; i < resultItems.length; i++) {\n                const currentMarker = resultItems[i].getElementsByClassName(CLASSNAMES.RESULTS_MARKER)[0];\n                if (!currentMarker) {\n                    resultItems[i].prepend(marker.cloneNode());\n                }\n            }\n        }\n        else {\n            const resultItems = this.resultsList.getElementsByTagName('li');\n            for (let i = 0; i < resultItems.length; i++) {\n                const marker = resultItems[i].getElementsByClassName(CLASSNAMES.RESULTS_MARKER)[0];\n                if (marker) {\n                    marker.remove();\n                }\n            }\n        }\n        return this;\n    }\n    setMarkerColor(color) {\n        this.config.markerColor = color;\n        const marker = this.resultsList.getElementsByClassName(CLASSNAMES.RESULTS_MARKER);\n        for (let i = 0; i < marker.length; i++) {\n            marker[i].setAttribute('src', getMarkerIcon(color));\n        }\n        return this;\n    }\n    setHideResultsOnBlur(hideResultsOnBlur) {\n        this.config.hideResultsOnBlur = hideResultsOnBlur;\n        if (hideResultsOnBlur) {\n            this.inputField.addEventListener('blur', this.close.bind(this), true);\n        }\n        else {\n            this.inputField.removeEventListener('blur', this.close.bind(this), true);\n        }\n        return this;\n    }\n}\n\nclass Radar extends Radar$1 {\n    // \"ui\" namespace for Maps and Autocomplete\n    static get ui() {\n        return {\n            maplibregl: MapUI.getMapLibre(),\n            map: MapUI.createMap,\n            marker: MapUI.createMarker,\n            popup: MapUI.createPopup,\n            autocomplete: AutocompleteUI.createAutocomplete,\n        };\n    }\n}\n\n\n//# sourceMappingURL=radar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/radar-sdk-js/dist/radar.js\n");

/***/ })

};
;